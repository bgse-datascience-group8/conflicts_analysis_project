extends layout

block head
  title=title
  style.
    svg {
      margin-top: 50px;
      border-radius: 2px;
    }

    h1.smallish {

    }

    .background {
      fill: none;
      pointer-events: all;
    }

    #states {
      fill: #333;
    }

    #states .active {
      fill: orange;
    }

    #state-borders {
      fill: none;
      stroke: white;
      stroke-width: 1px;
      stroke-linejoin: round;
      stroke-linecap: round;
      pointer-events: none;
    }

    .events-circle {
      color: #ad494a;
      fill: .000001;
      opacity: .000001;
    }

block content
  div.container
    nav.navbar.navbar-default.navbar-fixed-top#navbar-page
      .container-fluid
        // Collect the nav links, forms, and other content for toggling
        #bs-example-navbar-collapse-1.collapse.navbar-collapse
          ul.nav.navbar-nav
            li
              a(href='#') Top
            li
              a(href='#objective') Objective
    div.jumbotron
      h1.smallish U.S. Conflicts 
        span#date 2013-07-01
      p Below, find a time-lapse map of conflict events in the United States from July 1, 2013 through November 6, 2015. The radius of each dot is proportional to the log number of conflicts in that city on the corresponding day.
      p What follows is an introduction to the 
        a(href='#intro') Conflict Analysis Project.
    script(src='javascripts/d3.v3.min.js')
    script(src='javascripts/topojson.v1.min.js')
    script.
      var renderMap = function() {
        //Speed & animation-control variables
        var maprate = 1400,
          pause = 0,
          timepause=0,
          start = 0,
          interval,
          loop,
          dates,
          dateiter = 0;

        var minDate = new Date('02 July 2013'),
            maxDate = new Date('06 November 2015'),
            timescale = d3.time.scale()// .toISOString().substring(0,10)

        timescale.domain([minDate, maxDate])

        var dates = d3.time.day.range(minDate, maxDate)

        var width = 960,
            height = 500,
            centered;

        var projection = d3.geo.albersUsa()
            .scale(1070)
            .translate([width / 2, height / 2]);

        var path = d3.geo.path()
            .projection(projection);

        var svg = d3.select(".jumbotron").append("svg")
            .attr("width", width)
            .attr("height", height);

        svg.append("rect")
            .attr("class", "background")
            .attr("width", width)
            .attr("height", height)
            //.on("click", clicked);

        var g = svg.append("g");

        var circles = svg.append("svg:g")
          .attr("id", "circles");

        d3.json("javascripts/us.json", function(error, us) {
          if (error) throw error;

          g.append("g")
              .attr("id", "states")
            .selectAll("path")
              .data(topojson.feature(us, us.objects.states).features)
            .enter().append("path")
              .attr("d", path)
              //.on("click", clicked);

          g.append("path")
              .datum(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; }))
              .attr("id", "state-borders")
              .attr("d", path);

          renderCities();
        });

        function clicked(d) {
          var x, y, k;

          if (d && centered !== d) {
            timepause = 1;
            var centroid = path.centroid(d);
            x = centroid[0];
            y = centroid[1];
            k = 4;
            centered = d;
          } else {
            timepause = 0;
            x = width / 2;
            y = height / 2;
            k = 1;
            centered = null;
          }

          g.selectAll("path")
              .classed("active", centered && function(d) { return d === centered; });

          g.transition()
              .duration(750)
              .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")scale(" + k + ")translate(" + -x + "," + -y + ")")
              .style("stroke-width", 1.5 / k + "px");

          circles.transition()
              .duration(750)
              .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")scale(" + k + ")translate(" + -x + "," + -y + ")")
              .style("stroke-width", 1.5 / k + "px");
        }

        function renderCities() {
          updateMap = function(date) {
            // gross, but just to be sure.
            d3.selectAll('circle').remove()
            date = date.toISOString().substring(0,10)
            d3.select('#date').html(date)
            d3.json("javascripts/events/" + date + ".json", function(events) {
              positions = [];

              events.forEach(function(event) {
                var location = [+event.actiongeo_long, +event.actiongeo_lat];
                if (!(projection(location) == null)) {
                  positions.push(projection(location));
                } else {
                }
              });

              var radialGradient = svg.append("defs")
                .append("radialGradient")
                  .attr("id", "radial-gradient");

              radialGradient.append("stop")
                  .attr("offset", "0%")
                  .attr("stop-color", "#FFFC19");

              radialGradient.append("stop")
                  .attr("offset", "100%")
                  .attr("stop-color", "#333");

              var datapoints = d3.select("#circles").selectAll("circle")
                .data(events)
                .enter()
                .append("circle");
              datapoints.attr("class", 'events-circle')
              datapoints
                .transition()
                    .duration(675)
                    .style("fill", "url(#radial-gradient)")
                    .style("opacity", 1)
                    .attr("r", function(d,i){return Math.log(d.num_conflicts)*3})
                    .attr("cx", function(d,i){return positions[i][0]})
                    .attr("cy", function(d,i){return positions[i][1]})
                  .transition()
                    .duration(300)
                    .attr("r", function(d,i){return Math.log(d.num_conflicts)*3})
                    .attr("cx", function(d,i){return positions[i][0]})
                    .attr("cy", function(d,i){return positions[i][1]})
                    .style("opacity", 0.7)
                    .style("fill", "url(#radial-gradient)")
                  .transition()
                    .duration(200)
                    .attr("r", function(d,i){return Math.log(d.num_conflicts)*3})
                    .attr("cx", function(d,i){return positions[i][0]})
                    .attr("cy", function(d,i){return positions[i][1]})
                    .style("fill", "url(#radial-gradient)")
                    .style("opacity", 0.5)
                  .transition()
                    .duration(200)
                    .attr("r", function(d,i){return Math.log(d.num_conflicts)*3})
                    .attr("cx", function(d,i){return positions[i][0]})
                    .attr("cy", function(d,i){return positions[i][1]})
                    .style("fill", "url(#radial-gradient)")
                    .style("opacity", 0.2)
                  .remove();
            })
          }

          loop = function(){
            clearInterval(interval);
            if ((timepause == 0 && pause == 0) || start == 0) {
              updateMap(dates[dateiter]);
              if (dateiter < dates.length - 1) {
                ++dateiter;
              }
              else {
                dateiter = 0;
                timepause = 1;
                setTimeout(function(){timepause = 0;}, maprate);
              }
            }
            start = 1;
            interval = setInterval(loop, maprate);
          }

          interval = setInterval(loop, maprate);
        };
      }
      renderMap()

    br
    div#objective
      h1#intro Does conflict spread?
      br
      p What is spread?
      br
      p 
        | To study the hypothesis that conflict spreads, we need a definition of spread. Here,
        b  spread 
        | is defined as the relationship between an outcome and its place in space and time.
      br
      p The dependent variable in our analysis is the number of conflicts in a U.S. city in a given day at a given time.
      br
      p The structure of our analysis is as follows:
      ol
        li
          a(href='/summary') Summary:
          |  Summarize the dataset and understand its endogenous characteristics
        li
          a(href='/analysis#auto-corr') Auto-Correlation Analysis:
          |  Understand the effect of time
        li
          a(href='/analysis#spatial') Network & Geo-Cluster Analysis:
          |  Understand the effect of other cities across the space
        li
          a(href='/analysis#aggregated-model') Results:
          |  An aggregated model estimating the effects space and time jointly
        li
          a(href='/conclusion') Conclusions
    br
    br
    br
