extends layout

block content
  style.
    .states {
      fill: #ccc;
    }

    .state-borders {
      fill: none;
      stroke: #fff;
      stroke-width: 1.5px;
      stroke-linejoin: round;
      stroke-linecap: round;
    }

    .airport-arcs {
      display: none;
      fill: none;
      stroke: #000;
    }

    .airport-cell {
      fill: none;
      pointer-events: all;
    }

    .airports circle {
      fill: steelblue;
      stroke: #fff;
      pointer-events: none;
    }

    .airport:hover .airport-arcs {
      display: inline;
    }

    div.tooltip {   
      position: absolute;           
      text-align: center;               
      padding: 7px;             
      font: 10px sans-serif;
      color: white;        
      background: steelblue;   
      border: 1px solid white;      
      border-radius: 8px;           
      pointer-events: none;         
    }

    p.code {
      font-size: 12px;
      font-family: Menlo,Monaco,Consolas,"Courier New",monospace;
    }

  div.container
    nav.navbar.navbar-default.navbar-fixed-top#navbar-page
      .container-fluid
        // Collect the nav links, forms, and other content for toggling
        #bs-example-navbar-collapse-1.collapse.navbar-collapse
          ul.nav.navbar-nav
            li
              a(href='#') Top 
            li
              a(href='#autocorr') Auto-Correlation: by Example and in Aggregate
            li
              a(href='#networks') Networks: Lasso, SPACE and Geo-Clustering
            li
              a(href='#results') Results
            li
              a(href='#summary') Summary

    div.jumbotron
      h1#autocorr Auto-Correlation: by Example and in Aggregate

      h2#autocorr-ex Example of Auto-Correlation in 1 city: Boston
      p A vector auto-regressive matrix was used to regress 1 to n-days worth of lags. These tests were all found to be highly significant, with the first day's lag having the highest impact.

      p Below find the results of a regression of a single-day lag in one city, Boston, as an example.

      p On the left is the data and its regression line: day 0's standardized number of conflicts regressed on the previous day.

      p On the right is a plot of the residuals and the explanatory variable to demonstrate unbiasedness.

      br
      img(src='images/analysis_boston_ex1.png')

      h2#autocorr-all Auto-Correlation for All Cities from 1 to nth-day lag
      p The same regression was run for all 100 cities from the first to the eleventh-day lag.
      br
      img(src='images/analysis_lag_all_cities.png')

      h1#networks Networks: Lasso, SPACE and Geo-Clustering
      h2#basic-lasso Lasso v SPACE Partial Correlation
      p The Lasso-Neighborhood and SPACE algorithms formed partial correlation networks as visualized below.
      p The SPACE algorithm did a far superior job at identifying hubs. In network theory, it is commonly found hubs exist in most systems. A hub in a network is a vertex which has a much greater number of connections that most other entities.
      p Each city's network includes the other cities with which it shares an edge and the degree of the vertex is the number of connections for a a given city. The distribution of these vertices' degrees will have a power law distribution if the hub phenomena is present in the network.
      p In the histograms below the graphs, SPACE is much closer to having a power law distribution than LASSO.
      br
      img(src='images/analysis_network_lasso.png', style='display:inline;margin-right:-15px;')
      img(src='images/analysis_network_space.png', style='display:inline;margin-left:-15px;')
      br
      img(src='images/analysis_network_lasso_hist.png', style='display:inline;')
      img(src='images/analysis_network_space_hist.png', style='display:inline;')

      p 
        b The (SPACE-estimated) network and it's fit:
      p The level of conflict explained by each cities contemporaneous network as derived using the SPACE algorithm is visualized in the map below.

      p Hover over a city on the map and you will see its network represented by edges and the fit of the network approximated by the R-squared value of the corresponding regression.

      div#network-map
      script(src='javascripts/d3.v3.min.js')
      script(src='javascripts/topojson.v1.min.js')
      script(src='javascripts/queue.v1.min.js')
      script.
        var width = 960,
            height = 500;

        var div = d3.select("body").append("div")   
            .attr("class", "tooltip")               
            .style("opacity", 0);

        var projection = d3.geo.albers()
            .translate([width / 2, height / 2])
            .scale(1080);

        var path = d3.geo.path()
            .projection(projection);

        var voronoi = d3.geom.voronoi()
            .x(function(d) { return d.x; })
            .y(function(d) { return d.y; })
            .clipExtent([[0, 0], [width, height]]);

        var svg = d3.select("#network-map").append("svg")
            .attr("width", width)
            .attr("height", height);

        queue()
            .defer(d3.json, "javascripts/us.json")
            .defer(d3.csv, "javascripts/networks.csv")
            .defer(d3.csv, "javascripts/networks.csv")
            .await(ready);

        function ready(error, us, airports, flights) {
          if (error) throw error;

          var airportById = d3.map(),
              positions = [];

          airports.forEach(function(d) {
            airportById.set(d.X1, d);
            d.rsquared = +parseFloat(d.rsquared).toFixed(3);
            d[0] = +parseFloat(d.longitude);
            d[1] = +parseFloat(d.latitude);
            d.outgoing = [];
            d.incoming = [];
          });

          flights.forEach(function(flight) {
            var source = airportById.get(flight.X1),
                target = airportById.get(flight.X2),
                link = {source: source, target: target};
            source.outgoing.push(link);
            target.incoming.push(link);
          });


          airports = airports.filter(function(d) {
            if (d.count = Math.max(d.incoming.length, d.outgoing.length)) {
              var position = projection(d);
              d.x = position[0];
              d.y = position[1];
              return d.count > 3;
            }
          });

          voronoi(airports)
              .forEach(function(d) { d.point.cell = d; });

          svg.append("path")
              .datum(topojson.feature(us, us.objects.land))
              .attr("class", "states")
              .attr("d", path);

          svg.append("path")
              .datum(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; }))
              .attr("class", "state-borders")
              .attr("d", path);

          var airport = svg.append("g")
              .attr("class", "airports")
            .selectAll("g")
              .data(airports)
            .enter().append("g")
              .attr("class", "airport")

          airport.append("path")
              .attr("class", "airport-cell")
              .attr("d", function(d) {
                if (typeof(d.cell) !== 'undefined') {
                  return d.cell.length ? "M" + d.cell.join("L") + "Z" : null;
                }
              })
              .on("mouseover", function(d) { 
                    div.transition()        
                        .duration(100)      
                        .style("opacity", .9);      
                    div.html(d.X1 + '<br/>R-squared: ' + d.rsquared)  
                        .style("left", (d3.event.pageX) + "px")     
                        .style("top", (d3.event.pageY) + "px");    
                    })                  
                .on("mouseout", function(d) {       
                    div.transition()        
                        .duration(100)      
                        .style("opacity", 0);   
                });

          airport.append("g")
              .attr("class", "airport-arcs")
            .selectAll("path")
              .data(function(d) { return d.outgoing; })
            .enter().append("path")
              .attr("d", function(d) { return path({type: "LineString", coordinates: [d.source, d.target]}); });

          airport.append("circle")
              .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
              .attr("r", 5);

        }

      h2#kmeans Network: K-means Clustering of Regions and Effects
      p The effect of distance was estimated by clustering cities into 5 regions using a k-means algorithm.
      p Regionwise-clustering proxies for distance to estimate the effect of distance between cities. The hypothesis is cities which are in the same region are closer to each other and those cities might have a higher correlation with what happens in the same region than in other regions.
      br
      img(src='images/analysis_kluster_map.png')
      br
      img(src='images/analysis_kluster_region_coeffs_boxplot.png')
      
      h1#results Results
      p Using the terms from the auto-regression and network analyses, the first aggregated model fit was:
      p.code std_num_conflicts ~ 0 + (lag.std_num_conflicts + same_region + region.1 + region.2 + region.3 + region.4 + region.5 + log_population + log_population_sq + isWashingtonDC + weekend)
      
      p This model had a high level of significance and a high R-squared (see table below). However the region effects did not reflect previous estimations. A second model was fit without the regions:

      p.code std_num_conflicts ~ 0 + (lag.std_num_conflicts + log_population + log_population_sq + isWashingtonDC + weekend)

      p These results were also highly significant and demonstrated a (very) high R-squared. Cross-validation revealed the model is over fit to the data - the R-squared is closer to 0.5 than 0.95.
      br

      div.results-table
        h3 Models Summary
        table(style='text-align:center')
          tr
            td(colspan='3', style='border-bottom: 1px solid black')
          tr
            td(style='text-align:left')
            td(colspan='2')
              em Dependent variable:
          tr
            td
            td(colspan='2', style='border-bottom: 1px solid black')
          tr
            td(style='text-align:left')
            td(colspan='2') std_num_conflicts
          tr
            td(style='text-align:left')
            td (1)
            td (2)
          tr
            td(colspan='3', style='border-bottom: 1px solid black')
          tr
            td(style='text-align:left') lag.std_num_conflicts
            td
              | 0.681
              sup ***
            td
              | 0.755
              sup ***
          tr
            td(style='text-align:left')
            td (0.002)
            td (0.002)
          tr
            td(style='text-align:left')
            td
            td
          tr
            td(style='text-align:left') same_region
            td
              | -1.281
              sup ***
            td
          tr
            td(style='text-align:left')
            td (0.037)
            td
          tr
            td(style='text-align:left')
            td
            td
          tr
            td(style='text-align:left') region.1
            td
              | -1.254
              sup ***
            td
          tr
            td(style='text-align:left')
            td (0.040)
            td
          tr
            td(style='text-align:left')
            td
            td
          tr
            td(style='text-align:left') region.2
            td
              | -1.053
              sup ***
            td
          tr
            td(style='text-align:left')
            td (0.034)
            td
          tr
            td(style='text-align:left')
            td
            td
          tr
            td(style='text-align:left') region.3
            td
              | -1.188
              sup ***
            td
          tr
            td(style='text-align:left')
            td (0.037)
            td
          tr
            td(style='text-align:left')
            td
            td
          tr
            td(style='text-align:left') region.4
            td
              | -1.012
              sup ***
            td
          tr
            td(style='text-align:left')
            td (0.031)
            td
          tr
            td(style='text-align:left')
            td
            td
          tr
            td(style='text-align:left') region.5
            td
              | -1.433
              sup ***
            td
          tr
            td(style='text-align:left')
            td (0.041)
            td
          tr
            td(style='text-align:left')
            td
            td
          tr
            td(style='text-align:left') log_population
            td
              | -0.037
              sup ***
            td
          tr
            td(style='text-align:left')
            td (0.001)
            td
          tr
            td(style='text-align:left')
            td
            td
          tr
            td(style='text-align:left') log_population_sq
            td
              | 0.003
              sup ***
            td
              | -0.0001
              sup ***
          tr
            td(style='text-align:left')
            td (0.0001)
            td (0.00001)
          tr
            td(style='text-align:left')
            td
            td
          tr
            td(style='text-align:left') isWashingtonDC
            td
              | 2.164
              sup ***
            td
              | 2.041
              sup ***
          tr
            td(style='text-align:left')
            td (0.022)
            td (0.020)
          tr
            td(style='text-align:left')
            td
            td
          tr
            td(style='text-align:left') weekend
            td -0.002
            td
              | -0.007
              sup ***
          tr
            td(style='text-align:left')
            td (0.002)
            td (0.002)
          tr
            td(style='text-align:left')
            td
            td
          tr
            td(colspan='3', style='border-bottom: 1px solid black')
          tr
            td(style='text-align:left') Observations
            td 85,800
            td 85,800
          tr
            td(style='text-align:left')
              | R
              sup 2
            td 0.950
            td 0.947
          tr
            td(style='text-align:left')
              | Adjusted R
              sup 2
            td 0.950
            td 0.947
          tr
            td(style='text-align:left') Residual Std. Error
            td 0.198 (df = 85789)
            td 0.202 (df = 85796)
          tr
            td(colspan='3', style='border-bottom: 1px solid black')
          tr
            td(style='text-align:left')
              em Note:
            td(colspan='2', style='text-align:right')
              sup *
              | p

      div.results-table(style = 'float: right;')
        h3 Cross-Validation
        table
          tr
            th   
            th  Test 1 
            th  Test 2 
            th  Test 3 
            th  Test 4 
            th  Average 
          tr
            td(align='right')  R-squared 
            td(align='right')  0.68 
            td(align='right')  0.33 
            td(align='right')  0.60 
            td(align='right')  0.46 
            td(align='right')  0.52 
          tr
            td(align='right')  Adjusted R-Squared 
            td(align='right')  0.68 
            td(align='right')  0.33 
            td(align='right')  0.60 
            td(align='right')  0.46 
            td(align='right')  0.52 
          tr
            td(align='right')  Mean Squared Error 
            td(align='right')  0.06 
            td(align='right')  0.03 
            td(align='right')  0.04 
            td(align='right')  0.03 
            td(align='right')  0.04  
      br
      div.clearfix

      h1#summary Summary

      p While there is very little evidence to support that distance matters, there is strong evidence to support that time matters.
