extends layout

block head
  title=title
  style.
    .states {
      fill: #ccc;
    }

    .state-borders {
      fill: none;
      stroke: #fff;
      stroke-width: 1.5px;
      stroke-linejoin: round;
      stroke-linecap: round;
    }

    .airport-arcs {
      display: none;
      fill: none;
      stroke: #000;
    }

    .airport-cell {
      fill: none;
      pointer-events: all;
    }

    .airports circle {
      fill: steelblue;
      stroke: #fff;
      pointer-events: none;
    }

    .airport:hover .airport-arcs {
      display: inline;
    }

    svg:not(:hover) .airport-cell {
      stroke: #000;
      stroke-opacity: .2;
    }

    div.tooltip {   
      position: absolute;           
      text-align: center;           
      width: 60px;                  
      height: 28px;                 
      padding: 2px;             
      font: 12px sans-serif;        
      background: lightsteelblue;   
      border: 0px;      
      border-radius: 8px;           
      pointer-events: none;         
    }

block content
  div.container
    nav.navbar.navbar-default.navbar-fixed-top#navbar-page
      .container-fluid
        // Collect the nav links, forms, and other content for toggling
        #bs-example-navbar-collapse-1.collapse.navbar-collapse
          ul.nav.navbar-nav
            li
              a(href='#') Top
            li
              a(href='#objective') Objective
    div.jumbotron
      h1.smallish U.S. Conflicts 
        span#date 2013-04-01
    script(src='javascripts/d3.v3.min.js')
    script(src='javascripts/topojson.v1.min.js')
    script(src='javascripts/queue.v1.min.js')
    script.
      var width = 960,
          height = 500;

      var div = d3.select("body").append("div")   
          .attr("class", "tooltip")               
          .style("opacity", 0);

      var projection = d3.geo.albers()
          .translate([width / 2, height / 2])
          .scale(1080);

      var path = d3.geo.path()
          .projection(projection);

      var voronoi = d3.geom.voronoi()
          .x(function(d) { return d.x; })
          .y(function(d) { return d.y; })
          .clipExtent([[0, 0], [width, height]]);

      var svg = d3.select("body").append("svg")
          .attr("width", width)
          .attr("height", height);

      queue()
          .defer(d3.json, "javascripts/us.json")
          .defer(d3.csv, "javascripts/networks.csv")
          .defer(d3.csv, "javascripts/networks.csv")
          .await(ready);

      function ready(error, us, airports, flights) {
        if (error) throw error;

        var airportById = d3.map(),
            positions = [];

        airports.forEach(function(d) {
          airportById.set(d.X1, d);
          d.rsquared = +parseFloat(d.rsquared).toFixed(3);
          d[0] = +parseFloat(d.longitude);
          d[1] = +parseFloat(d.latitude);
          d.outgoing = [];
          d.incoming = [];
        });

        flights.forEach(function(flight) {
          var source = airportById.get(flight.X1),
              target = airportById.get(flight.X2),
              link = {source: source, target: target};
          source.outgoing.push(link);
          target.incoming.push(link);
        });


        airports = airports.filter(function(d) {
          if (d.count = Math.max(d.incoming.length, d.outgoing.length)) {
            var position = projection(d);
            d.x = position[0];
            d.y = position[1];
            return d.count > 3;
          }
        });

        voronoi(airports)
            .forEach(function(d) { d.point.cell = d; });

        svg.append("path")
            .datum(topojson.feature(us, us.objects.land))
            .attr("class", "states")
            .attr("d", path);

        svg.append("path")
            .datum(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; }))
            .attr("class", "state-borders")
            .attr("d", path);

        var airport = svg.append("g")
            .attr("class", "airports")
          .selectAll("g")
            .data(airports)
          .enter().append("g")
            .attr("class", "airport")

        airport.append("path")
            .attr("class", "airport-cell")
            .attr("d", function(d) {
              if (typeof(d.cell) !== 'undefined') {
                return d.cell.length ? "M" + d.cell.join("L") + "Z" : null;
              }
            })
            .on("mouseover", function(d) {      
                  div.transition()        
                      .duration(100)      
                      .style("opacity", .9);      
                  div.html(d.rsquared)  
                      .style("left", (d3.event.pageX) + "px")     
                      .style("top", (d3.event.pageY) + "px");    
                  })                  
              .on("mouseout", function(d) {       
                  div.transition()        
                      .duration(100)      
                      .style("opacity", 0);   
              });

        airport.append("g")
            .attr("class", "airport-arcs")
          .selectAll("path")
            .data(function(d) { return d.outgoing; })
          .enter().append("path")
            .attr("d", function(d) { return path({type: "LineString", coordinates: [d.source, d.target]}); });

        airport.append("circle")
            .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
            .attr("r", 5);

      }
    br
    br
    br
